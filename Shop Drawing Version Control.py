#code generated by Ian (Amin Khorram)

import os
import ezdxf
import re
import datetime
import subprocess
import matplotlib.pyplot as plt
from ezdxf.addons.drawing import RenderContext, Frontend
from ezdxf.addons.drawing.matplotlib import MatplotlibBackend
def convert_dwg_to_dxf(folder_path, output_folder):
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    for filename in os.listdir(folder_path):
        if filename.endswith('.dwg'):
            # Load DWG file
            TEIGHA_PATH = "C:\Program Files\ODA\ODAFileConverter 25.2.0\ODAFileConverter.exe"
            INPUT_FOLDER = folder_path  # Use the provided folder_path
            OUTPUT_FOLDER = output_folder  # Use the provided output_folder
            OUTVER = "ACAD2018"
            OUTFORMAT = "DXF" 
            RECURSIVE = "0"
            AUDIT = "1"
            INPUTFILTER = "*.DWG"

            # Command to run
            cmd = [TEIGHA_PATH, INPUT_FOLDER, OUTPUT_FOLDER, OUTVER, OUTFORMAT, RECURSIVE, AUDIT, INPUTFILTER]

            # Run
            subprocess.run(cmd, shell=True)

# Function to detect DXF files in a specific path
def find_dxf_files(folder_path):
    dxf_files = []
    for filename in os.listdir(folder_path):
        if filename.endswith('.dxf'):
            dxf_files.append(os.path.join(folder_path, filename))
    return dxf_files


# Function to find and print text entities (both single-line text and MTEXT) outside of blocks
def print_text_entities_outside_blocks(doc):
    outside_block_entities = []
    for entity in doc.entities:
        if entity.dxftype() in ['TEXT', 'MTEXT']:
            outside_block_entities.append(entity)
    print("Text entities outside of blocks:")
    for entity in outside_block_entities:
        if entity.dxftype() == 'TEXT':
            text = entity.dxf.text
        elif entity.dxftype() == 'MTEXT':
            text = entity.plain_text()
        print("Found text entity:", text)
#
#
# # Function to print all found text entities (both single-line text and MTEXT)
def print_text_entities(entities):
    for entity in entities:
        if entity.dxftype() == 'TEXT':
            text = entity.dxf.text
        elif entity.dxftype() == 'MTEXT':
            text = entity.plain_text()
        print("Found text entity:", text)

def is_no_circle_around(text_entity, entities, radius_in_inches=0.1):
    """Check if there is no circle within the specified radius of the text entity."""
    radius = radius_in_inches * 25.4  # Convert inches to millimeters
    x_text, y_text = text_entity.dxf.insert.x, text_entity.dxf.insert.y
    for entity in entities:
        if entity.dxftype() == 'CIRCLE':
            x_circle, y_circle = entity.dxf.center.x, entity.dxf.center.y
            distance = ((x_text - x_circle) ** 2 + (y_text - y_circle) ** 2) ** 0.5
            if distance <= radius:  # Check if the text is within the circle
                return False
    return True

# Function to modify text entities in DXF files
def modify_text_entities(entities):
    today_date = datetime.datetime.today().strftime('%b-%d-%Y')  # Get today's date
    for entity in entities:
        if entity.dxftype() == 'TEXT':
            text = entity.dxf.text

            # Increment revision number if 'Rev' is found
            if text.isdigit() and is_no_circle_around(entity, entities):
                current_number = int(entity.dxf.text)
                if current_number < 10:
                    entity.dxf.text = re.sub(r'\b(\d+)\b', lambda x: str(int(x.group(1)) + 1), entity.dxf.text)
            match_rev = re.search(r'Rev(\d+)', text)
            if match_rev:
                current_rev = int(match_rev.group(1))
                new_rev = current_rev + 1
                revised_text = re.sub(r'(?P<rev>Rev\s*)\d+', r'\g<rev>' + str(new_rev)+' - '+"AS BUILT", text)
                revised_text = re.sub(r'(AS BUILT).*', r'AS BUILT', revised_text)
                entity.dxf.text = revised_text
            # Convert dates to today's date in the same format
            if re.search(r'(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-\d{1,2}-\d{4}', text):
                entity.dxf.text = re.sub(r'(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-\d{1,2}-\d{4}', today_date, text)
            # Update stamp text only if "FOR CUSTOMER" is present
            if "FOR CUSTOMER" in text:
                entity.dxf.text = text.replace("FOR CUSTOMER", "APPROVED FOR")
            if "APPROVAL" in text:
                entity.dxf.text = text.replace("APPROVAL", "CONSTRUCTION")
            elif "APPROVED FOR" in text and "CONSTRUCTION" in text:
                entity.dxf.text = "AS BUILT"
        elif entity.dxftype() == 'MTEXT':
            text = entity.plain_text()
            # Increment revision number if 'Rev' is found
            match_rev = re.search(r'Rev(\d+)', text)
            if match_rev:
                current_rev = int(match_rev.group(1))
                new_rev = current_rev + 1
                revised_text = re.sub(r'(?P<rev>Rev\s*)\d+', r'\g<rev>' + str(new_rev)+' - '+"AS BUILT", text)
                revised_text = re.sub(r'(AS BUILT).*', r'AS BUILT', revised_text)
                entity.text = revised_text
            # Convert dates to today's date in the same format
            if re.search(r'(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-\d{1,2}-\d{4}', text):
                entity.text = re.sub(r'(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-\d{1,2}-\d{4}', today_date, text)
            # Update stamp text only if "FOR CUSTOMER" is present
            if "FOR CUSTOMER" in text:
                text = text.replace("FOR CUSTOMER", "APPROVED FOR")
            if "APPROVAL" in text:
                text = text.replace("APPROVAL", "CONSTRUCTION")
            elif "APPROVED FOR" in text and "CONSTRUCTION" in text:
                text = "AS BUILT"
            entity.text = text

        print("Found text entity:", entity.dxf.text if entity.dxftype() == 'TEXT' else entity.text)  # Print the text content

def print_drawings(dxf_files, pdf_folder):
    if not os.path.exists(pdf_folder):
        os.makedirs(pdf_folder)

    for file in dxf_files:
        doc = ezdxf.readfile(file)

        # Calculate the extents of the drawing
        min_x = min_y = float('inf')
        max_x = max_y = float('-inf')

        # Iterate over model space
        for entity in doc.modelspace():
            if entity.dxftype() == 'LINE':
                min_x = min(min_x, entity.dxf.start.x, entity.dxf.end.x)
                min_y = min(min_y, entity.dxf.start.y, entity.dxf.end.y)
                max_x = max(max_x, entity.dxf.start.x, entity.dxf.end.x)
                max_y = max(max_y, entity.dxf.start.y, entity.dxf.end.y)
            elif entity.dxftype() == 'LWPOLYLINE':
                for vertex in entity.vertices():
                    min_x = min(min_x, vertex[0])
                    min_y = min(min_y, vertex[1])
                    max_x = max(max_x, vertex[0])
                    max_y = max(max_y, vertex[1])

        # Iterate over paper space layouts
        for layout in doc.layouts:
            for entity in layout:
                if entity.dxftype() == 'LINE':
                    min_x = min(min_x, entity.dxf.start.x, entity.dxf.end.x)
                    min_y = min(min_y, entity.dxf.start.y, entity.dxf.end.y)
                    max_x = max(max_x, entity.dxf.start.x, entity.dxf.end.x)
                    max_y = max(max_y, entity.dxf.start.y, entity.dxf.end.y)
                elif entity.dxftype() == 'LWPOLYLINE':
                    for vertex in entity.vertices():
                        min_x = min(min_x, vertex[0])
                        min_y = min(min_y, vertex[1])
                        max_x = max(max_x, vertex[0])
                        max_y = max(max_y, vertex[1])

        # Calculate the width and height of the drawing
        width = max_x - min_x
        height = max_y - min_y

        # Add a slight margin of 0.25 inches
        margin = 0.25
        min_x -= margin
        min_y -= margin
        max_x += margin
        max_y += margin

        # Ensure the calculated dimensions are positive and finite
        if width <= 0 or height <= 0:
            continue

        # ANSI-B paper size in inches (11x17 inches)
        ansi_b_width_inches = 17
        ansi_b_height_inches = 11

        # Calculate the scale factor to fit the drawing onto the ANSI-B page
        scale_factor = min(ansi_b_width_inches / width, ansi_b_height_inches / height)

        # Calculate the new width and height of the drawing
        new_width = width * scale_factor
        new_height = height * scale_factor

        # Create a PDF file
        out_file = os.path.join(pdf_folder, os.path.splitext(os.path.basename(file))[0] + '.pdf')

        # Create a matplotlib figure with ANSI-B paper size
        fig, ax = plt.subplots(figsize=(ansi_b_width_inches, ansi_b_height_inches))
        fig.subplots_adjust(left=0, right=1, top=1, bottom=0)  # Set tight layout
        ax.set_xlim(min_x, min_x + new_width)
        ax.set_ylim(min_y, min_y + new_height)
        backend = MatplotlibBackend(ax)

        ctx = RenderContext(doc)
        out = MatplotlibBackend(ax)
        frontend = Frontend(ctx, out)

        # Draw model space
        frontend.draw_layout(doc.modelspace(), finalize=True)

        # Draw paper space layouts
        for layout in doc.layouts:
            if layout.name.lower() != 'model':
                frontend.draw_layout(layout, finalize=True)

        # Save the plot as PDF
        fig.savefig(out_file, format='pdf', dpi=300)
        plt.close(fig)

def modify_dxf_files(dxf_files, output_folder):
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)
    for file in dxf_files:
        doc = ezdxf.readfile(file)
        # Print text entities outside of blocks
        print_text_entities_outside_blocks(doc)

        # Print and modify text entities in model space
        model_space_layout = doc.modelspace()
        model_space_text_entities = [entity for entity in model_space_layout if entity.dxftype() in ['TEXT', 'MTEXT']]
        print_text_entities(model_space_text_entities)
        modify_text_entities(model_space_text_entities)

        # Print and modify text entities in paper space layouts
        for layout in doc.layouts:
            if layout.name.lower() != 'model':
                paper_space_text_entities = [entity for entity in layout if entity.dxftype() in ['TEXT', 'MTEXT']]
                print_text_entities(paper_space_text_entities)
                modify_text_entities(paper_space_text_entities)
                # Add comment to a specific part of the drawing in paperspace
                # Specify comment text and location
                spaces = " " * 11  # 10 spaces
                spacesdate = " " * 72  # 63 spaces
                comment_text = f"3{spaces}AS BUILT{spacesdate}Aug-06-2024"
                bottom_left_coordinate = (0, 0)
                offset_x = 6.66  # Offset from the left edge
                offset_y = 1.61  # Offset from the bottom edg
                coordinate = (bottom_left_coordinate[0] + offset_x, bottom_left_coordinate[1] + offset_y)
                # Create a new MTEXT entity
                mtext_entity = layout.add_mtext(comment_text, dxfattribs={'style': 'Arial'})

                # Set the insertion point of the MTEXT entity
                mtext_entity.dxf.insert = coordinate

                # Set the text height through the style of the MTEXT entity
                mtext_entity.dxf.char_height = 0.08

                # Set the color of the MTEXT entity to black
                mtext_entity.dxf.color = 0

                # Set the paperspace background to ANSI B (ANSIB)
            layout.dxf.paper_size = (11, 17)  # ANSI B size is 11x17 inches




        # Save the modified DXF file in the output folder
        filename = os.path.basename(file)
        output_file = os.path.join(output_folder, filename)
        doc.saveas(output_file)


folder_path = r""
output_folder = r""
pdf_folder = r""
# Convert DWG to DXF
convert_dwg_to_dxf(folder_path, output_folder)

# Find DXF files in the output folder
dxf_files = find_dxf_files(output_folder)

# Modify DXF files
modify_dxf_files(dxf_files, output_folder)
print_drawings(dxf_files, pdf_folder)
