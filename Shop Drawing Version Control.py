#code generated by Ian Khorram

class DXFProcessor:
    def __init__(self, teigha_path):
        self.TEIGHA_PATH = teigha_path
    
    #Function to convert the dwg files to editable dxf files
    def convert_dwg_to_dxf(self, folder_path, output_folder):
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)
        for filename in os.listdir(folder_path):
            if filename.endswith('.dwg'):
                INPUT_FOLDER = folder_path
                OUTPUT_FOLDER = output_folder
                OUTVER = "ACAD2018"
                OUTFORMAT = "DXF"
                RECURSIVE = "0"
                AUDIT = "1"
                INPUTFILTER = "*.DWG"

                cmd = [self.TEIGHA_PATH, INPUT_FOLDER, OUTPUT_FOLDER, OUTVER, OUTFORMAT, RECURSIVE, AUDIT, INPUTFILTER]
                subprocess.run(cmd, shell=True)

    #Function to find the dxf files inside the working folder
    def find_dxf_files(self, folder_path):
        dxf_files = []
        for filename in os.listdir(folder_path):
            if filename.endswith('.dxf'):
                dxf_files.append(os.path.join(folder_path, filename))
        return dxf_files
    
    # Function to find and print text entities (both single-line text and MTEXT) outside of blocks
    def print_text_entities_outside_blocks(self, doc):
        outside_block_entities = []
        for entity in doc.entities:
            if entity.dxftype() in ['TEXT', 'MTEXT']:
                outside_block_entities.append(entity)
        print("Text entities outside of blocks:")
        for entity in outside_block_entities:
            text = entity.dxf.text if entity.dxftype() == 'TEXT' else entity.plain_text()
            print("Found text entity:", text)

    # Function to print all found text entities (both single-line text and MTEXT)
    def print_text_entities(self, entities):
        for entity in entities:
            text = entity.dxf.text if entity.dxftype() == 'TEXT' else entity.plain_text()
            print("Found text entity:", text)


    # Function to modify text entities in DXF files
    def modify_text_entities(self, entities):
        today_date = datetime.datetime.today().strftime('%b-%d-%Y')
        for entity in entities:
            if entity.dxftype() == 'TEXT':
                text = entity.dxf.text
                if text.isdigit():
                    current_number = int(text)
                    if current_number < 10:
                        entity.dxf.text = re.sub(r'\b(\d+)\b', lambda x: str(int(x.group(1)) + 1), text)
                match_rev = re.search(r'Rev\s*(\d+)', text)
                if match_rev:
                    current_rev = int(match_rev.group(1))
                    new_rev = current_rev + 1
                    revised_text = re.sub(r'(?P<rev>Rev\s*)\d+', r'\g<rev>' + str(new_rev) + ' - ' + "AS BUILT", text)
                    entity.dxf.text = revised_text
                if re.search(r'(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-\d{1,2}-\d{4}', text):
                    entity.dxf.text = re.sub(r'(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-\d{1,2}-\d{4}', today_date, text)
                if "FOR CUSTOMER" in text:
                    entity.dxf.text = text.replace("FOR CUSTOMER", "APPROVED FOR")
                if "APPROVAL" in text:
                    entity.dxf.text = text.replace("APPROVAL", "CONSTRUCTION")
                elif "APPROVED FOR" in text and "CONSTRUCTION" in text:
                    entity.dxf.text = "AS BUILT"
            elif entity.dxftype() == 'MTEXT':
                text = entity.plain_text()
                match_rev = re.search(r'Rev\s*(\d+)', text)
                if match_rev:
                    current_rev = int(match_rev.group(1))
                    new_rev = current_rev + 1
                    revised_text = re.sub(r'(?P<rev>Rev\s*)\d+', r'\g<rev>' + str(new_rev) + ' - ' + "AS BUILT", text)
                    entity.text = revised_text
                if re.search(r'(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-\d{1,2}-\d{4}', text):
                    entity.text = re.sub(r'(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-\d{1,2}-\d{4}', today_date, text)
                if "FOR CUSTOMER" in text:
                    text = text.replace("FOR CUSTOMER", "APPROVED FOR")
                if "APPROVAL" in text:
                    text = text.replace("APPROVAL", "CONSTRUCTION")
                elif "APPROVED FOR" in text and "CONSTRUCTION" in text:
                    text = "AS BUILT"
                entity.text = text
            print("Found text entity:", entity.dxf.text if entity.dxftype() == 'TEXT' else entity.text)

    #Function to print the dxf_files in PDF format 
    def print_drawings(self, dxf_files, pdf_folder):
        if not os.path.exists(pdf_folder):
            os.makedirs(pdf_folder)

        for file in dxf_files:
            doc = ezdxf.readfile(file)

            min_x = min_y = float('inf')
            max_x = max_y = float('-inf')

            for entity in doc.modelspace():
                if entity.dxftype() == 'LINE':
                    min_x = min(min_x, entity.dxf.start.x, entity.dxf.end.x)
                    min_y = min(min_y, entity.dxf.start.y, entity.dxf.end.y)
                    max_x = max(max_x, entity.dxf.start.x, entity.dxf.end.x)
                    max_y = max(max_y, entity.dxf.start.y, entity.dxf.end.y)
                elif entity.dxftype() == 'LWPOLYLINE':
                    for vertex in entity.vertices():
                        min_x = min(min_x, vertex[0])
                        min_y = min(min_y, vertex[1])
                        max_x = max(max_x, vertex[0])
                        max_y = max(max_y, vertex[1])

            for layout in doc.layouts:
                for entity in layout:
                    if entity.dxftype() == 'LINE':
                        min_x = min(min_x, entity.dxf.start.x, entity.dxf.end.x)
                        min_y = min(min_y, entity.dxf.start.y, entity.dxf.end.y)
                        max_x = max(max_x, entity.dxf.start.x, entity.dxf.end.x)
                        max_y = max(max_y, entity.dxf.start.y, entity.dxf.end.y)
                    elif entity.dxftype() == 'LWPOLYLINE':
                        for vertex in entity.vertices():
                            min_x = min(min_x, vertex[0])
                            min_y = min(min_y, vertex[1])
                            max_x = max(max_x, vertex[0])
                            max_y = max(max_y, vertex[1])

            width = max_x - min_x
            height = max_y - min_y

            margin = 0.25
            min_x -= margin
            min_y -= margin
            max_x += margin
            max_y += margin

            if width <= 0 or height <= 0:
                continue

            ansi_b_width_inches = 17
            ansi_b_height_inches = 11
            scale_factor = min(ansi_b_width_inches / width, ansi_b_height_inches / height)
            new_width = width * scale_factor
            new_height = height * scale_factor

            out_file = os.path.join(pdf_folder, os.path.splitext(os.path.basename(file))[0] + '.pdf')
            fig, ax = plt.subplots(figsize=(ansi_b_width_inches, ansi_b_height_inches))
            fig.subplots_adjust(left=0, right=1, top=1, bottom=0)
            ax.set_xlim(min_x, min_x + new_width)
            ax.set_ylim(min_y, min_y + new_height)
            backend = MatplotlibBackend(ax)

            ctx = RenderContext(doc)
            out = MatplotlibBackend(ax)
            frontend = Frontend(ctx, out)

            frontend.draw_layout(doc.modelspace(), finalize=True)
            for layout in doc.layouts:
                if layout.name.lower() != 'model':
                    frontend.draw_layout(layout, finalize=True)

            fig.savefig(out_file, format='pdf', dpi=300)
            plt.close(fig)

    #Function to read and modify the dxf files
    def modify_dxf_files(self, dxf_files, output_folder):
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)
        for file in dxf_files:
            doc = ezdxf.readfile(file)
            self.print_text_entities_outside_blocks(doc)

            model_space_layout = doc.modelspace()
            model_space_text_entities = [entity for entity in model_space_layout if entity.dxftype() in ['TEXT', 'MTEXT']]
            self.print_text_entities(model_space_text_entities)
            self.modify_text_entities(model_space_text_entities)

            for layout in doc.layouts:
                if layout.name.lower() != 'model':
                    paper_space_text_entities = [entity for entity in layout if entity.dxftype() in ['TEXT', 'MTEXT']]
                    self.print_text_entities(paper_space_text_entities)
                    self.modify_text_entities(paper_space_text_entities)

                    comment_text = "2          APPROVED FOR CONSTRUCTION                     Apr-02-2024"
                    bottom_left_coordinate = (0, 0)
                    offset_x = 6.66
                    offset_y = 1.78
                    coordinate = (bottom_left_coordinate[0] + offset_x, bottom_left_coordinate[1] + offset_y)
                    mtext_entity = layout.add_mtext(comment_text, dxfattribs={'style': 'Arial'})
                    mtext_entity.dxf.insert = coordinate
                    mtext_entity.dxf.char_height = 0.08
                    mtext_entity.dxf.color = 0
                    layout.dxf.paper_size = (11, 17)

            filename = os.path.basename(file)
            output_file = os.path.join(output_folder, filename)
            doc.saveas(output_file)




        # Save the modified DXF file in the output folder
        filename = os.path.basename(file)
        output_file = os.path.join(output_folder, filename)
        doc.saveas(output_file)


if __name__ == "__main__":
    teigha_path = r"C:\Program Files\ODA\ODAFileConverter 25.2.0\ODAFileConverter.exe"
    folder_path = r""
    output_folder = r""
    pdf_folder = r""

    processor = DXFProcessor(teigha_path)

    # Convert DWG to DXF
    processor.convert_dwg_to_dxf(folder_path, folder_path)

    # Find DXF files in the output folder
    dxf_files = processor.find_dxf_files(folder_path)

    # Modify DXF files
    processor.modify_dxf_files(dxf_files, output_folder)

    # Print drawings to PDF
    processor.print_drawings(dxf_files, pdf_folder)
